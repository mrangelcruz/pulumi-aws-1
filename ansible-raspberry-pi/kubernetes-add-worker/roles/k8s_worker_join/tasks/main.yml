---
- name: Wait for the new worker to become available
  ansible.builtin.wait_for_connection:
    timeout: 300
  become: false

- name: Clean APT cache
  ansible.builtin.command: apt-get clean
  become: true

- name: Update APT cache
  ansible.builtin.apt:
    update_cache: true
  become: true

- name: Create APT keyrings directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  become: true

- name: Ensure gpg is installed
  ansible.builtin.apt:
    name: gnupg
    state: present
  become: true

- name: Download Kubernetes GPG key
  ansible.builtin.get_url:
    url: https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key # Use the appropriate Kubernetes version
    dest: /tmp/kubernetes-release.key
    mode: '0644'

- name: Convert GPG key to dearmored format and move to apt keyrings
  ansible.builtin.command: >
    gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg /tmp/kubernetes-release.key
  args:
    creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  changed_when: false # This command might not always report changes, so set to false

- name: Clean up downloaded GPG key
  ansible.builtin.file:
    path: /tmp/kubernetes-release.key
    state: absent

# DEPRECATED ATTEMPTS - KEEPING FOR REFERENCE
# - name: Download and import Kubernetes GPG key (exact replica of controller)
#   ansible.builtin.shell: |
#     curl -fsSL https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
#   become: true
#   register: gpg_import
#   failed_when: false
# - name: Fallback GPG key import if primary method fails
#   ansible.builtin.shell: |
#     curl -fsSL https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}/deb/Release.key | apt-key add -
#   become: true
#   when: gpg_import.rc != 0
#   register: gpg_fallback
# - name: Add Kubernetes APT repository (exact replica of controller)
#   ansible.builtin.apt_repository:
#     repo: "{{ 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v' + k8s_version + '/deb/ /' if gpg_import.rc == 0 else 'deb https://pkgs.k8s.io/core:/stable:/v' + k8s_version + '/deb/ /' }}"
#     state: present
#     filename: kubernetes
#   become: true

- name: Add Kubernetes APT repository
  ansible.builtin.apt_repository:
    repo: "deb [signed-by=/usr/share/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v{{ k8s_version }}deb/ /" 
    filename: kubernetes
    state: present


# - name: Update APT cache after adding repository
#   ansible.builtin.apt:
#     update_cache: true
#   become: true

# - name: Install necessary Kubernetes packages (exact replica of controller)
#   ansible.builtin.apt:
#     name:
#       - "kubelet={{ k8s_version }}-*"
#       - "kubeadm={{ k8s_version }}-*"
#       - "kubectl={{ k8s_version }}-*"
#       - containerd
#     state: present
#   become: true

# - name: Hold Kubernetes packages to prevent automatic upgrades
#   ansible.builtin.dpkg_selections:
#     name: "{{ item }}"
#     selection: hold
#   loop:
#     - kubelet
#     - kubeadm
#     - kubectl
#   become: true

# - name: Ensure 'overlay' kernel module is loaded
#   community.general.modprobe:
#     name: overlay
#     state: present
#   become: true

# - name: Ensure 'br_netfilter' kernel module is loaded
#   community.general.modprobe:
#     name: br_netfilter
#     state: present
#   become: true

# - name: Add 'overlay' and 'br_netfilter' to load on boot
#   ansible.builtin.copy:
#     content: |
#       overlay
#       br_netfilter
#     dest: /etc/modules-load.d/k8s.conf
#     mode: '0644'
#   become: true

# - name: Apply sysctl settings for Kubernetes networking
#   ansible.posix.sysctl:
#     name: "{{ item }}"
#     value: "1"
#     sysctl_file: /etc/sysctl.d/k8s.conf
#     state: present
#     reload: yes
#   loop:
#     - net.bridge.bridge-nf-call-iptables
#     - net.bridge.bridge-nf-call-ip6tables
#     - net.ipv4.ip_forward
#   become: true

# - name: Configure containerd for `systemd` cgroup driver
#   ansible.builtin.copy:
#     content: |
#       [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
#         SystemdCgroup = true
#     dest: /etc/containerd/config.toml
#     mode: '0644'
#   become: true
#   notify: Restart containerd

# - name: Disable swap for kubelet compatibility
#   ansible.builtin.command: swapoff -a
#   become: true

# - name: Ensure swap is disabled permanently in fstab
#   ansible.builtin.replace:
#     path: /etc/fstab
#     regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
#     replace: '#\1\2\3swap\4'
#     backup: true
#   become: true
#   notify: Restart kubelet

# - name: Join the Kubernetes cluster
#   ansible.builtin.shell: "{{ kube_join_command }}"
#   args:
#     chdir: /
#     executable: /bin/bash
#   become: true
#   register: kube_join_output

# - name: Print join output (for debugging)
#   ansible.builtin.debug:
#     var: kube_join_output.stdout_lines