---
- name: Wait for the new worker to become available
  ansible.builtin.wait_for_connection:
    timeout: 300
  become: false

- name: Clean APT cache
  ansible.builtin.command: apt-get clean
  become: true

- name: Update APT cache
  ansible.builtin.apt:
    update_cache: true
  become: true

- name: Create APT keyrings directory
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'
  become: true

- name: Ensure gpg is installed
  ansible.builtin.apt:
    name: gnupg
    state: present
  become: true

- name: Import Kubernetes GPG key using apt-key (legacy method)
  ansible.builtin.shell: |
    curl -fsSL https://pkgs.k8s.io/core/stable/v{{ k8s_version }}/deb/Release.key | apt-key add -
  become: true
  register: gpg_import
  retries: 3
  delay: 5

- name: Debug - Check GPG key content
  ansible.builtin.shell: |
    curl -fsSL https://pkgs.k8s.io/core/stable/v{{ k8s_version }}/deb/Release.key | head -10
  become: true
  register: gpg_debug
  changed_when: false

- name: Display GPG key debug info
  ansible.builtin.debug:
    var: gpg_debug.stdout_lines

- name: Verify GPG key import
  ansible.builtin.shell: |
    apt-key list | grep -i kubernetes || echo "No Kubernetes keys found with apt-key"
  become: true
  register: gpg_verify
  changed_when: false

- name: Display GPG key verification result
  ansible.builtin.debug:
    var: gpg_verify.stdout_lines

- name: Clean up temporary GPG key file
  ansible.builtin.file:
    path: /tmp/kubernetes-apt-key.gpg
    state: absent
  become: true

- name: Add Kubernetes APT repository for v{{ k8s_version }}
  ansible.builtin.apt_repository:
    repo: "deb https://pkgs.k8s.io/core/stable/v{{ k8s_version }}/deb/ /"
    state: present
    filename: kubernetes
  become: true

- name: Test APT update to verify repository configuration
  ansible.builtin.apt:
    update_cache: true
  become: true
  register: apt_test_update
  failed_when: false

- name: Display APT update test result
  ansible.builtin.debug:
    var: apt_test_update

- name: Update APT cache
  ansible.builtin.apt:
    update_cache: true
  become: true

- name: Install necessary Kubernetes packages
  ansible.builtin.apt:
    name:
      - "kubelet={{ k8s_version }}-*"
      - "kubeadm={{ k8s_version }}-*"
      - "kubectl={{ k8s_version }}-*"
      - containerd
    state: present
  become: true

- name: Hold Kubernetes packages to prevent automatic upgrades
  ansible.builtin.dpkg_selections:
    name: "{{ item }}"
    selection: hold
  loop:
    - kubelet
    - kubeadm
    - kubectl
  become: true

- name: Ensure 'overlay' kernel module is loaded
  community.general.modprobe:
    name: overlay
    state: present
  become: true

- name: Ensure 'br_netfilter' kernel module is loaded
  community.general.modprobe:
    name: br_netfilter
    state: present
  become: true

- name: Add 'overlay' and 'br_netfilter' to load on boot
  ansible.builtin.copy:
    content: |
      overlay
      br_netfilter
    dest: /etc/modules-load.d/k8s.conf
    mode: '0644'
  become: true

- name: Apply sysctl settings for Kubernetes networking
  ansible.posix.sysctl:
    name: "{{ item }}"
    value: "1"
    sysctl_file: /etc/sysctl.d/k8s.conf
    state: present
    reload: yes
  loop:
    - net.bridge.bridge-nf-call-iptables
    - net.bridge.bridge-nf-call-ip6tables
    - net.ipv4.ip_forward
  become: true

- name: Configure containerd for `systemd` cgroup driver
  ansible.builtin.copy:
    content: |
      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
        SystemdCgroup = true
    dest: /etc/containerd/config.toml
    mode: '0644'
  become: true
  notify: Restart containerd

- name: Disable swap for kubelet compatibility
  ansible.builtin.command: swapoff -a
  become: true

- name: Ensure swap is disabled permanently in fstab
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^(\s*)([^#\n]+\s+)(\w+\s+)swap(\s+.*)$'
    replace: '#\1\2\3swap\4'
    backup: true
  become: true
  notify: Restart kubelet

- name: Join the Kubernetes cluster
  ansible.builtin.shell: "{{ kube_join_command }}"
  args:
    chdir: /
    executable: /bin/bash
  become: true
  register: kube_join_output

- name: Print join output (for debugging)
  ansible.builtin.debug:
    var: kube_join_output.stdout_lines